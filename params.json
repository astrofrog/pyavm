{"name":"PyAVM","tagline":"Pure-python AVM library","body":"About\r\n-----\r\n\r\nPyAVM is a module to represent, read, and write metadata following the\r\n[*Astronomy Visualization Metadata*](http://www.virtualastronomy.org/avm_metadata.php)\r\n(AVM) standard.\r\n\r\nRequirements\r\n------------\r\n\r\nPyAVM supports Python 2.6, 2.7, 3.1, 3.2, and 3.3. No other dependencies are\r\nneeded simply to read and embed AVM meta-data.\r\n\r\nHowever, the following optional dependencies are needed for more advanced\r\nfunctionality:\r\n\r\n* [Astropy](http://www.astropy.org) to handle WCS objects and FITS headers\r\n* [py.test](http://www.pytest.org) and\r\n  [PIL](http://www.pythonware.com/products/pil/) for tests\r\n\r\nInstalling and Reporting issues\r\n-------------------------------\r\n\r\nTo install PyAVM, you can simply do:\r\n\r\n    pip install pyavm\r\n\r\nif you have ``pip`` installed. Otherwise, download the\r\n[latest tar file](https://pypi.python.org/pypi/PyAVM/), then install using:\r\n\r\n    tar xvzf PyAVM-x.x.x.tar.gz\r\n    cd PyAVM-x.x.x\r\n    python setup.py install\r\n\r\nPlease report any issues you encounter via the\r\n[issue tracker](https://github.com/astrofrog/pyavm/issues) on GitHub.\r\n\r\nUsing PyAVM\r\n-----------\r\n\r\n### Importing\r\n\r\nPyAVM provides the ``AVM`` class to represent AVM meta-data, and is imported as follows:\r\n\r\n    >>> from pyavm import AVM\r\n\r\n### Parsing files\r\n\r\nTo parse AVM meta-data from an existing image, simply call the ``from_image``\r\nclass method using the filename of the image (or any file-like object):\r\n\r\n    >>> avm = AVM.from_image('myexample.jpg')\r\n\r\nOnly JPEG and PNG files are properly supported in that the parsing follows the\r\nJPEG and PNG specification. For other file formats, PyAVM will simply scan the\r\ncontents of the file, looking for an XMP packet. This method is less reliable,\r\nbut should work in most real-life cases.\r\n\r\n### Accessing and setting the meta-data\r\n\r\nYou can view the contents of the AVM object by using\r\n\r\n    >>> print(avm)\r\n\r\nThe AVM meta-data can be accessed using the attribute notation:\r\n\r\n    >>> avm.Spatial.Equinox\r\n    'J2000'\r\n    >>> avm.Publisher\r\n    'Chandra X-ray Observatory'\r\n\r\nTags can be modified:\r\n\r\n    >>> avm.Spatial.Equinox = \"B1950\"\r\n    >>> avm.Spatial.Notes = \"The WCS information was updated on 04/02/2010\"\r\n\r\n### Creating an AVM object from scratch\r\n\r\nTo create an empty AVM meta-data holder, simply call ``AVM()`` without any\r\narguments:\r\n\r\n    >>> avm = AVM()\r\n\r\nNote that this will create an AVM object following the 1.2 specification. If necessary, you can specify which version of the standard to use:\r\n\r\n    >>> avm = AVM(version=1.1)\r\n\r\n### Converting to a WCS object\r\n\r\nIt is possible to create an Astropy WCS object from the AVM meta-data:\r\n\r\n    >>> wcs = avm.to_wcs()\r\n\r\nBy default, ``Spatial.FITSheader`` will be used if available, but if not, the WCS\r\ninformation is extracted from the other ``Spatial.*`` tags. To force PyAVM to not\r\ntry ``Spatial.FITSheader``, use:\r\n\r\n    >>> wcs = avm.to_wcs(use_full_header=False)\r\n\r\n### Initializing from a FITS header\r\n\r\nTo create an AVM meta-data object from a FITS header, simply pass the header\r\n(as an Astropy Header instance) to the ``from_header`` class method:\r\n\r\n    >>> from astropy.io import fits\r\n    >>> header = fits.getheader('image.fits')\r\n    >>> avm = AVM.from_header(header)\r\n\r\nBy default, the AVM tag ``Spatial.FITSheader`` will be created, containing the\r\nfull header (in addition to the other ``Spatial.*`` tags). This can be\r\ndisabled with:\r\n\r\n    >>> avm = AVM.from_header(header, include_full_header=False)\r\n\r\n### Initializing from a WCS object\r\n\r\nSimilarly, it is possible to create an AVM meta-data object from an Astropy WCS instance:\r\n\r\n    >>> from astropy.wcs import WCS\r\n    >>> from pyavm import AVM\r\n    >>> wcs = WCS('image.fits')\r\n    >>> avm = AVM.from_wcs(wcs)\r\n\r\n### Tagging images with AVM meta-data\r\n\r\nIt is possible to embed AVM meta-data into an image file:\r\n\r\n    >>> avm.embed('original_image.jpg', 'tagged_image.jpg')\r\n\r\nAt this time, only JPG and PNG files are supported for embedding.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}